// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  goals         Goal[]       @relation("UserGoals")
  joinedGoals   Goal[]
  checkpoints   Checkpoint[]
  followedBy    User[]       @relation("UserFollows")
  following     User[]       @relation("UserFollows")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Goal {
  id          String       @id @default(cuid())
  owner       User         @relation("UserGoals", fields: [ownerId], references: [id])
  ownerId      String
  users       User[]
  title       String
  description String
  createdAt   DateTime     @default(now())
  endDate     DateTime
  checkpoints Checkpoint[]
  buyIn       Float
  open        Boolean      @default(false)
}

// every user of goal sohuld have right to vote on every checkpoint for every user
model Checkpoint {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  goal      Goal     @relation(fields: [goalId], references: [id])
  userId    String
  goalId    String
  date      DateTime
  completed Boolean  @default(false)
}
